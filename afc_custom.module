<?php
/**
 * @file
 * Module file for custom behaviours and functions used by AFC
 * Basic hook implementations and helper functions will be found here.
 *
 *
 */

/**
 * Custom function get the total and current shoutout count for a user
 *
 */
function _get_shoutout_count($uid) {

    if (empty($uid)) {
        return false;
    }
    //watchdog('afc_custom', 'Function: _get_shoutout_count - Get shoutout counts');
    $profile = get_profile($uid);

    if ($profile) {
        if (isset($profile->field_total_shoutouts) && isset($profile->field_current_shoutouts)) {

            $current = $profile->field_current_shoutouts[LANGUAGE_NONE][0]['value'];
            $ttl = $profile->field_total_shoutouts[LANGUAGE_NONE][0]['value'];

            $array_ret = array();
            $array_ret['current'] = (empty($current) ? 0 : $current);
            $array_ret['total'] = (empty($ttl) ? 0 : $ttl);

            return $array_ret;
        }
    } else {
        watchdog('afc_custom', 'Function: _get_shoutout_count - No $profile for $uid supplied');
        return false;
    }
}

/**
 * Custom Function to retrun users full name from user id
 */
function user_full_name($user){
    $user_fields = user_load($user);
    $userProfile = profile2_load_by_user($user_fields, $type_name = 'main');
    $firstname = $userProfile->field_nick_name['und']['0']['value'];
    $lastname = $userProfile->field_last_name['und']['0']['value'];
    $title = $firstname . ' ' . $lastname;
    return $title;
}

/**
 * Custom function to test IP is ours
 * This is used to restrict access to the shoutout page
 * so it can only be viewed from on this campus
 */
function ip_is_afc ($ip) {
    if (!$ip) {
        watchdog('afc_custom','Called function ip_is_afc but no IP was given');
        return false;
    }

    //these will need to be updated when we change our IPs
    $pri_addrs = array (
        '66.241.66.114', //afn ips
        '66.241.66.115',
        '66.241.66.116',
        '66.241.66.117',
        '66.241.66.118',
        '69.9.146.34', //dsl infostructure ips
        '69.9.146.25',
    );

    if (in_array($ip, $pri_addrs)) {
        return true;
    } else {
//        watchdog('afc_custom','Function ip_is_afc returned false!');
        return false;
    }

    return false;
}

/**
 * Custom function get the uid of the user inside
 * the department who is labeled 'manager'
 */
function _get_manager_of_dept($dept_tid, $manager_tid) {

    //Select the employee profile id that is in the department supplied, and has the manager termID
    $query = db_query("SELECT et.entity_id, et.field_employee_type_tid, profile.uid, uu.status
                  FROM {field_data_field_department} fd
                  join {field_data_field_employee_type} et
                  on fd.entity_id = et.entity_id
                  join profile
                  on profile.pid = et.entity_id
                  join users uu on profile.uid = uu.uid
                  where fd.field_department_tid =".$dept_tid."
                  and uu.status = 1
                  and et.field_employee_type_tid =".$manager_tid);

    $records = $query->fetchAll();

    if ($records[0]->entity_id) {
        //found one, return it
        watchdog('afc_custom','Function: _get_manager_of_dept found manager uid: @uid', array('@uid' => $records[0]->uid));
        return $records[0]->uid;
    } else {
        //no manager was found for that department
        watchdog('afc_custom','Function: _get_manager_of_dept returned zero results for the sql query');
        return false;
    }
}

/**
 * Custom function get the tid for the term 'manager'
 */
function _get_manager_tid() {

    //maybe load the vocab by name instead of queriing anything?
    $query = db_query("SELECT t.tid FROM {taxonomy_term_data} t where t.name ='manager'");
    $records = $query->fetchAll();

    if ($records[0]->tid) {
        //if its there, return the first one
        return $records[0]->tid;
    } else {
        return false;
    }
}


/**
 * Custom function to alert manager of shoutout prize
 * uid is the user who has received the 3rd shoutout
 *
 * @return bool
 */
function shoutout_alert($uid) {
//    get the user_
//    get the department
//    get the tid used for the term 'manager'
//    get the manager of that department

    $user_profile = get_profile($uid);
    $manager_tid = _get_manager_tid();
    watchdog('afc_custom','Function: shoutout_alert started, preparing email to manager');

    if ($user_profile && $manager_tid) {
        if (isset($user_profile->field_department[LANGUAGE_NONE])) {
            $dept_tid = $user_profile->field_department[LANGUAGE_NONE][0]['tid'];
            $manager_uid = _get_manager_of_dept($dept_tid,$manager_tid);
            //if a manager uid was found
            if ($manager_uid) {
                $manager = user_load($manager_uid);
                if ($manager->status == 1) { //if the manager is active
                    $mgr_profile = get_profile($manager_uid);

                    $site_email = variable_get('site_mail', '');
                    $users_name = $user_profile->field_nick_name[LANGUAGE_NONE][0]['value'].' '.$user_profile->field_last_name[LANGUAGE_NONE][0]['value'];

                    //get the last reward field collection item id and send it to the email
                    if (isset($user_profile->field_employee_rewards[LANGUAGE_NONE])) {
                        global $base_url;
                        $last = end($user_profile->field_employee_rewards[LANGUAGE_NONE]);
                        $reward_fc_id = $last['value'];
                        $link = $base_url.'/update_recognized/'.$reward_fc_id;
                    } else {
                        $link = 'An error has occurred please contact your admin. Check watchdog log';
                        watchdog('afc_custom','The field_employee_rewards field collection is not on the users profile. No beuno son');
                        return false;
                    }

                    watchdog('afc_custom','Function: shoutout_alert - built email and submitted it for @tuser', array('@tuser' => $users_name));

                    if($manager_uid == $uid) { //if the manager is the one getting a shoutout send it to the GM, if they are an operations manager send it to the Store Manager
                      $mgr_type = $user_profile->field_operations_manager[LANGUAGE_NONE][0]['value'];
                      if($mgr_type == '1') {
                        $to = 'storemanager@ashlandfood.coop';
                        $mgr_name = 'Store Manager';
                      } else {
                        $to = 'gm@ashlandfood.coop';
                        $mgr_name = 'General Manager';
                      }
                        $values = array(
                            'manager_email' => $to,
                            'manager_nick_name' => $mgr_name,
                            'employee_name' => $users_name,
                            'update_link' => $link,
                        );
                        drupal_mail('afc_custom', 'shoutout_alert', $to, 'en', $values, $site_email);
                        return true;
                    } else { //normal shoutout
                        $to = $manager->mail;
                        $values = array(
                            'manager_email' => $manager->mail,
                            'manager_nick_name' => $mgr_profile->field_nick_name[LANGUAGE_NONE][0]['value'],
                            'employee_name' => $users_name,
                            'update_link' => $link,
                        );
                        drupal_mail('afc_custom', 'shoutout_alert', $to, 'en', $values, $site_email);
                    }

                    return true;
                } else {
                    watchdog('afc_custom','Function: shoutout_alert - There was NO Active Manager found for this user.');
                    //if there is no manager, then email hrteam
                }
            } else {
                watchdog('afc_custom','Function: shoutout_alert - There was NO Manager found for this user. This could mean the department field is not set on the users account or there is no user in that department marked as a manager in field employee type');
                //if there is no manager, then email hrteam
            }
        } else {
            watchdog('afc_custom','Function: shoutout_alert - There is NO field_department on the users profile');
        }
    } else {
        //if these fail - send an email to hrteam@ashlandfood.coop letting them no someone needs a shoutout but doesnt have a manager.
        return false;
    }
    $values = array(
        'manager_email' => 'hrteam@ashlandfood.coop',
        'to' => 'hrteam@ashlandfood.coop',
        'employee_name' => ($user_profile->field_full_name[LANGUAGE_NONE][0]['value']) ? $user_profile->field_full_name[LANGUAGE_NONE][0]['value'] : 'No Name Found',
    );

    drupal_mail('afc_custom', 'shoutout_alert_no_manager', 'hrteam@ashlandfood.coop', 'en', $values, variable_get('site_mail', ''));
    return false;
}

/**
 * Custom function to delete the last reward field collection item
 */
function shoutout_delete_reward($uid) {
//removing reward field collection item
    if(!$uid) {
        return false;
    }

    $user_account = user_load($uid);
    $user_profile = get_profile($uid);

    if ($user_account && $user_profile) {
        if(isset($user_profile->field_employee_rewards[LANGUAGE_NONE])) {
            $key_to_select = max(array_keys($user_profile->field_employee_rewards[LANGUAGE_NONE]));
            $item_id = $user_profile->field_employee_rewards[LANGUAGE_NONE][$key_to_select]['value'];
            $item = entity_metadata_wrapper('field_collection_item', $item_id);

            //load the field collection item. If its already been recognized, then bounce
            if($item->field_recognized_bool->value() ==1) {
                watchdog('afc_custom','Error: Tried to delete a field collection item reward that has already been recognized.
                    If you are trying to remove a reward from someones account, it failed. You cannot remove a reward
                    that has already been given and recognized by the manager.');

                drupal_set_message('Error: Tried to delete a reward that has already been recognized.
                    If you are trying to remove a reward from someones account, it failed. You cannot remove a reward
                    that has already been given and recognized by the manager.','warning');
                return false;
            } else {
                entity_delete_multiple('field_collection_item', array($item_id));
                drupal_set_message('Success! Removed a reward item from the employee account');
                watchdog('afc_custom', 'Function: shoutout_delete_reward - Deleted FC item on user profile. Uid: @uid', array('@uid' => $uid));
                return true;
            }
        } else {
            //if field_employee_rewards is not set, it could be gone or just empty. toss error
            watchdog('afc_custom', 'Function: shoutout_delete_reward - Error on Uid: @uid could not delete FC item.
                Either because field_employee_rewards does not exist on the profile OR it is empty', array('@uid' => $uid));
            return false;
        }
    } else {
        watchdog('afc_custom', 'Function: FALSE shoutout_delete_reward - Uid: @uid', array('@uid' => $uid));
        return false;
    }
}

/**
 * Custom function to create a reward field collection for a user who received 3 shoutouts
 * uid is the user who has received the 3rd shoutout
 */
function shoutout_create_reward($uid) {
//    get the user_
//    add a field collection item to field_employee_rewards
//    programatically create field collection item on user profile

    watchdog('afc_custom', 'Function: shoutout_create_reward Started - Uid: @uid', array('@uid' => $uid));
    $user_account = user_load($uid);
    $user_profile = get_profile($uid);

        //$field = entity_load('field_collection_item', array($user_profile->field_employee_rewards['und'][1]['value']));
    if ($user_account && $user_profile) {
        if(isset($user_profile->field_employee_rewards)) {
            $mydate =date("Y-m-d") . ' 00:00:00'; //get todays date for reward date
            $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_employee_rewards'));
            $field_collection_item->setHostEntity('profile2', $user_profile);
            $field_collection_item->field_reward_ref[LANGUAGE_NONE][]['target_id'] = 67; //68 PAID DAY OFF' 67 COFFEE TOKEN
            $field_collection_item->field_recognized_bool[LANGUAGE_NONE][]['value'] = 0; //whats 1
            //$field_collection_item->field_date_of_recognition[LANGUAGE_NONE][0]['value'] = $mydate;
            $field_collection_item->field_reward_post_date[LANGUAGE_NONE][0]['value'] = $mydate;

            $field_collection_item->save(TRUE);
            profile2_save($user_profile);

            watchdog('afc_custom', 'Function: shoutout_create_reward - Created FC item on user profile. Uid: @uid', array('@uid' => $uid));
            return true;
        }
    }
    watchdog('afc_custom', 'Function: shoutout_create_reward FALSE. Either no userid, no profile, or no field named field_employee_rewards
    was found. Submitted value: @uid', array('@uid' => $uid));
    $site_email = variable_get('site_mail', 'help@ashlandfood.coop');
    $to = $site_email;
    $values = array(
        'uid' => $uid,
        'to' => $to,
    );
    drupal_mail('afc_custom', 'create_reward_error', $to, 'en', $values, $site_email);
    return false;
}

/**
 * Custom function to get user profile fields
 */
function get_profile($uid) {
    $user = user_load($uid);
    if ($user) {
        $profile = profile2_load_by_user($user);
        if (isset($profile['main'])) {
            $profile = $profile['main'];
            return $profile;
        } else {
            return FALSE;
        }

    } else {
        return FALSE;
    }
}


/**
 * Custom function to remove a shoutout
 *  and change number when a shoutout is unpublished or deleted
 */
function afc_custom_remove_shoutout($uid) {

    if (empty($uid)) {
        return false;
    }
    watchdog('afc_custom', 'Function: afc_custom_remove_shoutout - Begin remove shoutout');
    $profile = get_profile($uid);

    if ($profile) {
        if (isset($profile->field_total_shoutouts) && isset($profile->field_current_shoutouts)) {

            $total_so = $profile->field_total_shoutouts[LANGUAGE_NONE][0]['value'];
            $current_so = $profile->field_current_shoutouts[LANGUAGE_NONE][0]['value'];

            //if its a normal count such as 1 current, 4 total, then simply minus one from both
            if ($current_so != 0 && $total_so != 0) {
                watchdog('afc_custom','removal: counted down current(@ct) and total(@ttl) shoutouts',array('@ct' => $current_so, '@ttl' => $total_so));
                $profile->field_current_shoutouts[LANGUAGE_NONE][0]['value'] = $current_so - 1;
                $profile->field_total_shoutouts[LANGUAGE_NONE][0]['value'] =  $total_so - 1;
                profile2_save($profile);
                return true;
            } elseif ($current_so == 0 && $total_so > 0 && $total_so % 3 == 0) {
                //if its equal to 0 then we need to remove a reward
                //if its equal to zero, then we need to countdown the total by one, and change the current from zero to two
                watchdog('afc_custom','removal: counted down current(@ct) and total(@ttl) shoutouts',array('@ct' => $current_so, '@ttl' => $total_so));
                if (shoutout_delete_reward($uid)) {
                    $profile->field_total_shoutouts[LANGUAGE_NONE][0]['value'] =  $total_so - 1;
                    $profile->field_current_shoutouts[LANGUAGE_NONE][0]['value'] =  2;
                    profile2_save($profile);
                    return true;
                } else {
                    watchdog('afc_custom','shoutout_delete_reward returned false. An error happened, email tech');
                    $site_email = variable_get('site_mail', 'help@ashlandfood.coop');
                    $to = $site_email;
                    $body = 'The user unpublished a shoutout which tried to remove a reward on the employee
                     account, but the reward has already been recognized. There is not fix for this really.
                     HR just needs to understand, that unpublishing an old shoutout will not affect the shoutout count or remove
                     any rewards.';
                    $values = array(
                        'uid' => $uid,
                        'to' => $to,
                        'body' => $body,
                    );
                    drupal_mail('afc_custom', 'general_shoutout_error', $to, 'en', $values, $site_email);
                    return false;
                }
            } else {
                watchdog('afc_custom','removal: Unhandled exception!
                uid: @uid,
                current:@current,
                total:@total',
                    array(
                        '@uid' => $uid,
                        '@current' => $current_so,
                        '@total' => $total_so,
                    )
                );

                $site_email = variable_get('site_mail', 'help@ashlandfood.coop');
                $to = $site_email;
                $values = array(
                    'uid' => $uid,
                    'to' => $to,
                );
                drupal_mail('afc_custom', 'remove_shoutout_error', $to, 'en', $values, $site_email);
                return false;
            }

        } else {
            watchdog('afc_custom','Function: afc_custom_remove_shoutout - one or both of the profile fields are not set on user profile. field_total_shoutouts field_current_shoutouts');
            return false;
        }
    } else {
        watchdog('afc_custom','Function: afc_custom_remove_shoutout - no profile was found');
        return false;
    }
}

/**
 * Custom function to count shoutouts
 *  and change number when new shoutout is given
 */
function afc_custom_calculate_shoutout($uid) {

    if (empty($uid)) {
        watchdog('afc_custom', 'Function: ERROR afc_custom_calculate_shoutout - uid was empty');
        $site_email = variable_get('site_mail', 'help@ashlandfood.coop');
        $to = $site_email;
        $values = array(
            'uid' => $uid,
            'to' => $to,
        );
        drupal_mail('afc_custom', 'calculate_shoutout_error', $to, 'en', $values, $site_email);
        return false;
    }

    watchdog('afc_custom', 'Function: afc_custom_calculate_shoutout - Begin calculate shoutout');
    $profile = get_profile($uid);

    if ($profile) {
        if (isset($profile->field_total_shoutouts) && isset($profile->field_current_shoutouts)) {

            $total_so = $profile->field_total_shoutouts[LANGUAGE_NONE][0]['value'];
            $current_so = $profile->field_current_shoutouts[LANGUAGE_NONE][0]['value'];

            //add new shoutout to shoutouts and save
            $profile->field_current_shoutouts[LANGUAGE_NONE][0]['value'] = $current_so + 1;
            $profile->field_total_shoutouts[LANGUAGE_NONE][0]['value'] =  $total_so + 1;
            profile2_save($profile);

            if ($profile->field_current_shoutouts[LANGUAGE_NONE][0]['value'] == 3) {
                watchdog('afc_custom','User just received 3 shoutouts and should have a new reward item on their account.');
                //create a reward field collection item for the user if theyve reached 3
                shoutout_create_reward($uid);
                //alert manager of shoutout prize with an email
                if (!shoutout_alert($uid)) {
                    $site_email = variable_get('site_mail', 'help@ashlandfood.coop');
                    $to = $site_email;
                    $values = array(
                        'uid' => $uid,
                        'to' => $to,
                    );
                    drupal_mail('afc_custom', 'create_reward_error', $to, 'en', $values, $site_email);
                }
                //reset current shoutouts to 0. Since we load the $profile in shoutout_create_reward and save it, we MUST re-load the $profile here before we save it again
                $profile = get_profile($uid);
                $profile->field_current_shoutouts[LANGUAGE_NONE][0]['value'] = 0;
                profile2_save($profile);

                watchdog('afc_custom','Function: afc_custom_calculate_shoutout - sent manager email, created reward record on employee profile and reset current shoutouts to 0');
                watchdog('afc_custom','== END ==========================================================');
                return true;
            } else {
                watchdog('afc_custom', 'Function: afc_custom_calculate_shoutout - Calculations complete. Wasn\'t 3, so we\'re done');
                watchdog('afc_custom','== END ==========================================================');
                //current shoutouts was not 3, so do nothing more
                return true;
            }
        } else {
            watchdog('afc_custom','Function: afc_custom_calculate_shoutout - one or both of the profile fields are not set on user profile. field_total_shoutouts field_current_shoutouts');
        }
    } else {
        watchdog('afc_custom','Function: afc_custom_calculate_shoutout - no profile was found');
    }

    watchdog('afc_custom', 'Function: afc_custom_calculate_shoutout - No cases were handled. Returning false');
    //if something went wrong here, alert tech
    $site_email = variable_get('site_mail', 'help@ashlandfood.coop');
    $to = $site_email;
    $values = array(
        'uid' => $uid,
        'to' => $to,
    );
    drupal_mail('afc_custom', 'calculate_shoutout_error', $to, 'en', $values, $site_email);
    return false;
}


/**
 * Custom function that creates shoutout node from
 *  submitted response on shoutout webform
 */
function afc_custom_add_new_shoutout(&$nodeinfo){
    if (empty($nodeinfo['employee_from'])) {
        watchdog('afc_custom', 'Function: ERROR afc_custom_add_new_shoutout - no badge number given');
        return false;
    }
    if (empty($nodeinfo['general_or_cxi'])) {
        watchdog('afc_custom', 'Function: ERROR afc_custom_add_new_shoutout - no general or cxi value given');
        return false;
    }
    watchdog('afc_custom','== BEGIN =========================================================');
    watchdog('afc_custom', 'Function: afc_custom_add_new_shoutout - begin making new shoutout');
    global $user; //should be service account

    $emp_from = afc_custom_return_uid_for_badge($nodeinfo['employee_from']);
    //if value is general then it doesnt get calculated into amount
    //just set value on node for now
    if ($nodeinfo['general_or_cxi'] == 'tid_71') {
        //tid_72 = CXi //tid_71 = general
        $general_or_cxi = 1;
    } else {
        $general_or_cxi = 0;
    }

    $title = 'shoutout to ' . $nodeinfo['employee_to'] . ' ' . date('m-d-y');
    $new_message = null;
    $new_message = new stdClass();
    $new_message->title = $title;
    $new_message->body[LANGUAGE_NONE][0]['value'] = $nodeinfo['body'];
    $new_message->type = 'shoutout';
    $new_message->language = LANGUAGE_NONE;
    node_object_prepare($new_message);
    $new_message->uid = $user->uid;
    $new_message->status = 1;
    $new_message->promote = 0;
    $new_message->comment = 0;
    $new_message->field_employee[LANGUAGE_NONE][0]['uid'] = $nodeinfo['employee_to'];
    $new_message->field_employee_from[LANGUAGE_NONE][0]['uid'] = $emp_from;
    $new_message->field_general_shoutout_[LANGUAGE_NONE][0]['value'] = $general_or_cxi;

    $new_message = node_submit($new_message);
    node_save($new_message);

    watchdog('afc_custom', 'Created new shoutout to user @user', array('@user' => $nodeinfo['employee_to']));

    //return the dropdown value so we know whether or not this counted toward CXi rewards.
    watchdog('afc_custom', 'Returning value @general for cxi/general dropdown on shoutout form', array('@general' => $general_or_cxi));
    return $nodeinfo['general_or_cxi'];
}

/**
 * Custom function to lookup uid for badge number
 */
function afc_custom_return_uid_for_badge($badge) {
    if ($badge) {
        $query = db_query("SELECT p.uid FROM {field_data_field_badge} b join {profile} p on entity_id = pid where b.field_badge_value =".$badge);
        $records = $query->fetchAll();
        if ($records[0]->uid) {
            //if its there, return the first one
            return $records[0]->uid;
        }
    } else {
        return false;
    }
}

/**
 * Implements hook_menu().
 */
function afc_custom_menu() {
    $items = array();

    $items['badge/%ctools_js'] = array(
        'page callback' => 'afc_custom_badge_callback',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['update_recognized/%'] = array(
        'page callback' => 'afc_custom_update_recognized_callback',
        'page arguments' => array(1),
        'access callback' => 'update_recognized_access_check',
        'access arguments' => array(1, array('Manager','HR Admin','administrator')),
        'type' => MENU_CALLBACK,
    );

    $items['shoutout/add/like/%'] = array(
        'page callback' => 'afc_custom_ajax_get_ajax', // Render HTML.
        'page arguments' => array(3),
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
        'delivery callback' => 'afc_custom_ajax_callback',  // Magic goes here.
    );
    return $items;
}

function afc_custom_ajax_get_ajax($nid) {
    //https://www.drupal.org/docs/7/api/javascript-api/simple-drupal-ajax-load-with-jquery-and-delivery-callback

    //if the node id was in the url
    if (!empty($nid)) {
        $shoutout_node = node_load($nid);
        //if the shoutout_likes field is present on the content type
        if (isset($shoutout_node->field_shoutout_likes)) {

            //the current number in the field. or if it's empty make it 0
            $current_likes = (empty($shoutout_node->field_shoutout_likes[LANGUAGE_NONE][0]['value'])) ? 0 : $shoutout_node->field_shoutout_likes[LANGUAGE_NONE][0]['value'];
            $new_likes = $current_likes + 1;
            $shoutout_node->field_shoutout_likes[LANGUAGE_NONE][0]['value'] = $new_likes;
            node_save($shoutout_node);

            watchdog('afc_custom', 'Function afc_custom_ajax_get_ajax: New like added for node: @nid', array('@nid' => $nid));
            return $new_likes;
        } else {
            watchdog('afc_custom', 'Function afc_custom_ajax_get_ajax: Could not run AJAX command to like the shoutout because the field_shoutout_likes does not exist on the node provided');
            return null;
        }
    } else {
        //node nid was supplied
        return null;
    }
}


function afc_custom_ajax_callback($page_callback_result) {
    //the value comes from the function afc_custom_ajax_get_ajax return
   //if its true send back some html to invoke a heart or some other imagery
    if ($page_callback_result) {
        //the css targets this inner div
        print '<div>'.$page_callback_result.'</div>';
   }

}


function update_recognized_access_check($user, $roles = array()) {
    global $user;
    $check = array_intersect($roles, array_values($user->roles));
    return empty($check) ? FALSE : TRUE;
}

/**
 * menu callback to recognize field collection item. set it to yes
 * @param $item_id field collection item ID from hook_menu
 */
function afc_custom_update_recognized_callback($item_id) {
    //field collection item id from url
    $collection = entity_metadata_wrapper('field_collection_item', $item_id);
    //if fc is empty, then it no longer exists. Probably because the reward was removed due
    //to a shoutout being unpublished
    if (!isset($collection->field_recognized_bool)) {
        drupal_set_message('Sorry, this reward was removed from the employee\'s account! No further action is needed from you.
         Contact HR with any questions.', 'warning');
        drupal_goto('<front>');
    } else {
        $collection->field_recognized_bool = 1;
        $collection->save(true);
        watchdog('afc_custom','Updated user reward item to recognized = yes. Field Collection ID is: @item',array('@item' => $item_id));

        if(user_has_role(4) || user_has_role(3)) {
            //if user is admin or hr admin then send them to manage shoutouts
            drupal_set_message('Thanks! The employee reward has been marked as complete!');
            drupal_goto('manage-shoutouts');
        } else {
            drupal_set_message('Thanks! The employee reward has been marked as complete! You can close this page now.');
            drupal_goto('<front>');
        }
        return;
    }

}

/**
 * Ajax menu callback.
 */
function afc_custom_badge_callback($ajax) {
    if ($ajax) {

        ctools_include('ajax');
        ctools_include('modal');

        $form_state = array(
            'ajax' => TRUE,
            'title' => t('Enter Staff #'),
        );

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('badge_number_form', $form_state);

        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }

        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    }
    else {
        return drupal_get_form('badge_number_form');
    }
}

function badge_number_form_submit($form, $form_state) {
    $badge = $form_state['values']['staff_number'];
    $uid = afc_custom_return_uid_for_badge($badge);
    $user = user_load($uid);
    //get users email and email them the pdf

}

function badge_number_form_validate($form, $form_state) {
    if(isset($form_state['values']['staff_number'])) {
        $badge = $form_state['values']['staff_number'];
        $uid = afc_custom_return_uid_for_badge($badge);
        if (!$uid) {
            //error if we can't find a matching uid for that badge
            form_set_error('', t('It looks like your badge# is incorrect :('));
//            $form_state['rebuild'] = TRUE;
        } else {
            $form_state['values']['submitted']['employee_id'] = $uid;

        }
    } else {
        form_set_error('', t('No badge# given'));
    }
}

/**
 * hook_form
 */
function badge_number_form($form, $form_state) {
    $form = array();

    $form['staff_number'] = array(
        '#type' => 'textfield',
        '#title' => t('Your Staff #'),
    );

    $form['cancel'] = array(
        '#type' => 'cancel',
        '#value' => t('Cancel'),
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );
    return $form;
}
/**
 * hook_form_alter
 */
function afc_custom_form_alter(&$form, &$form_state, $form_id) {

    //name tag request form
    if ($form_id == 'webform_client_form_29') {


    }

    if ($form_id == 'user_login' && isset($_GET['afc_auto'])) {
        if($_SERVER['REMOTE_ADDR'] == '66.241.66.120') {
            //auto service_account check afc_custom.js for the other field needed
            $un = $_GET['un'];
            $form['name']['#default_value'] = $un;
            $form['pass']['#attributes']['class'][] = 'afc-auto';
        }
        //1679 is the uid for svc account
    }


    //exposed filter for shoutout stats
    if($form['#id']=='views-exposed-form-shoutout-comment-list-block') {
        $form['field_full_name_value_shout_out']['#attributes']['placeholder'] = 'Employee name';
    }

    //SHOUTOUT FORM
    if ($form_id == 'webform_client_form_84') {

        ctools_include('modal');
        ctools_include('ajax');
        ctools_add_js('ajax-responder');

        //add an extra js file to the form because we can't select elements on this form
        //from the main js file. Maybe becauses its modal/ajax...idk but this works
        $form['#attached']['js'] = array(
            drupal_get_path('module', 'afc_custom') . '/js/shoutout_popups.js',
        );
                //SUBMITTED EMPLOYEE SHOUTOUT FORM
                //on submit calculate shoutouts and alert manager
                if (!empty($form_state['executed'])) {

                    $emp_from = $form_state['input']['submitted']['employee_id_from'];
                    $emp_to = $form['submitted']['employee_id_to']['#default_value'];
                    $general_or_cxi = $form['submitted']['general_or_cxi']['#default_value'];
                    //tid_72 = CXi  //tid_71 = general

                    $other_msg = $form_state['input']['submitted']['shoutout_message'];
                    $nodeinfo = array();
                    $nodeinfo['employee_to'] = $emp_to;
                    $nodeinfo['employee_from'] = $emp_from;
                    $nodeinfo['general_or_cxi'] = $general_or_cxi;
                    $nodeinfo['body'] = $other_msg;

                    //if afc_custom_add_new_shoutout is tid_71, then the shoutout is general and does not count
                    //toward CXi rewards. Thus, we do not want to call the calculate function (afc_custom_calculate_shoutout)
                    $add_new_shoutout = afc_custom_add_new_shoutout($nodeinfo);

                    if ($add_new_shoutout=='tid_71') {
                        //finish and dont calculate
                        watchdog('afc_custom', 'Function: form_alter - The shoutout was a general shoutout and did not count toward CXi. It was just
                        added as a node, but not calculated into shoutout totals.');
                    } elseif ($add_new_shoutout == FALSE) {
                        //if false something bad happened
                        watchdog('afc_custom', 'Function: form_alter the function afc_custom_add_new_shoutout that adds a new shoutout node has FAILED.
                        No shoutout was created. No calculation was done.');
                    } elseif ($add_new_shoutout == 'tid_72') {
                        //shoutout was CXi related and should count toward rewards. Calculate, alert, etc.
                        afc_custom_calculate_shoutout($emp_to);
                    } else {
                        watchdog('afc_custom', 'Function: form_alter - An unknown response came from function afc_custom_add_new_shoutout. This response is not handled
                        and thus nothing happened after submitting this shoutout.');
                    }

                }
                //END EMPLOYEE SUBMITTED SHOUTOUT FORM

        //get the user the shoutout is to
        if (isset($_GET['sho'])) {

            $user = user_load(check_plain($_GET['sho']));
            if ($user) {
                $form['submitted']['employee_id_to']['#default_value'] = $user->uid;
                $profile = profile2_load_by_user($user);
                $profile = $profile['main'];
                $nick_name = $profile->field_nick_name['und'][0]['value'] . ' ' . $profile->field_last_name['und'][0]['value'];

//                $form['submitted']['my_form_component']['#title'] = $nick_name;
                $form['nickname'] = array(
                    '#markup' => '<div class="nickname">Shoutout to '.$nick_name.'</div>',
                    '#weight' => -10,
                );

            }

        }

        //Add validate
        $form['#validate'][] = 'afc_custom_validate_webform_84';

    }


    //GREEN WAY TO WORK FORM
    if ($form_id == 'webform_client_form_83') {

        //for each option load its image from the taxonomy term and display it
        foreach ($form['submitted']['transportation_method']['#options'] as $key => $option) {
            $tid = explode('_',$key);
            $tid = taxonomy_term_load(trim($tid[1]));
            $fid = $tid->field_transportation_pic['und'][0]['fid'];
            $file = file_load($fid);
            $uri = $file->uri;
            $url = file_create_url($uri);
            $form['submitted']['transportation_method']['#options'][$key] = '<img src="'.$url.'">'.$option;

        }

        //Add the miles range slider


        //Add validate - checks employee id make sure its valid
        $form['#validate'][] = 'afc_custom_validate_webform_83';

    }


    //for webforms that are modals, use ajax to dismiss them once submitted
    if(strstr($form_id, 'webform_client_form_')) {
        if(strstr($form['#action'], 'modal_forms')) {
            //if there is a body in modal then display it. The rest is css
            if (!empty($form['#node']->body['und'][0]['value'])) {
                $form['desc'] = array(
                    '#markup' => '<div class="desc">'.$form['#node']->body['und'][0]['value'].'</div>',
                    '#weight' => -10,
                );
            }

            //if submitted
            if (!empty($form_state['executed'])) {
                if (!empty($form['#node']->webform['confirmation'])) {
                    //grab confirmation message from webform config
                    $msg = $form['#node']->webform['confirmation'];
                } else {
                    $msg = 'Thanks!';
                }
                $output[] = ctools_modal_command_dismiss(); //Close modal automatically
                $output[] = ajax_command_replace('#ajax-response', '<div id="ajax-msg">'.$msg.'</div>');
                print ajax_render($output);
                drupal_exit();
            }
        }
    }


     if ($form_id == 'user_profile_form') {
            $form['contact']['#access'] = FALSE;
  }
}
  //Restrict employee access to edit their own photos - Phil 6-15-17
function afc_custom_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $roles = $user->roles;
    if(in_array('employee', $roles))  {
      $form['picture']['#disabled'] = TRUE;
    }
}
/**
 * Implements hook_webform_submission_presave().
 */

function afc_custom_webform_submission_presave($node, &$submission) {

    switch ($node->nid){
        case 83:
            $submission->uid = $submission->data[1][0];
        break;
    }
}
/**
 * Validation handler for Webform ID #83 BIKE TO WORK FORM.
 */
function afc_custom_validate_webform_83(&$form, &$form_state) {
//function to replace employee badge# with uid.
watchdog('afc_custom', 'running validate 83');
    if(isset($form_state['values']['submitted']['employee_id'])) {
        watchdog('afc_custom', 'running validate 83 employee_id is set');
        $badge = $form_state['values']['submitted']['employee_id'];
        $uid = afc_custom_return_uid_for_badge($badge);
        if (!$uid) {
            //error if we can't find a matching uid for that badge
            form_set_error('', t('It looks like your badge# is incorrect :('));
//            $form_state['rebuild'] = TRUE;
        } else {
            $form_state['values']['submitted']['employee_id'] = $uid;

        }
    } else {
        form_set_error('', t('No badge# given'));
    }

}


/**
 * Validation handler for Webform ID #84 SHOUTOUT FORM.
 */
function afc_custom_validate_webform_84(&$form, &$form_state) {
//function to replace employee badge# with uid
    watchdog('afc_custom', 'running validate 84');

    //must have message
//    if (empty($form_state['values']['submitted']['shoutout_canned_responses'] || $form_state['values']['submitted']['shoutout_message'])) {
//        form_set_error('', t('Tell us what amazing thing this person did. Don\'t leave it blank, that\'s lame.'));
//    }

    //must have badge numbers
    if(isset($form_state['values']['submitted']['employee_id_from']) && isset($form_state['values']['submitted']['employee_id_from'])) {
        watchdog('afc_custom', 'running validate 84 its set');

        $badge = $form_state['values']['submitted']['employee_id_from'];
        $badge_to = $form_state['values']['submitted']['employee_id_to'];
        //employee_id_to is already a UID by this time - its not a badge#

        $uid = afc_custom_return_uid_for_badge($badge);
        $uid_to = $badge_to;

        if (!$uid || !$uid_to) {
            //error if we can't find a matching uid for that badge
            form_set_error('', t('It looks like your badge# is incorrect :('));
            //$form_state['rebuild'] = TRUE;
        } else {
            if ($uid == $uid_to) {
                //if the person is submitting a shoutout to themselves
                form_set_error('', t('You can\'t shout yourself out, sorry. Shout someone else out!'));
            }
            $form_state['values']['submitted']['employee_id_from'] = $uid;
        }
    } else {
        form_set_error('', t('Something got all jacked up, sorry :('));
    }
}

function afc_custom_webform_js_submit($form, $form_state) {
    watchdog('afc_custom', 'calling js submit');
    // define the $sid variable (submission id from webform)
    $sid = $form_state['values']['details']['sid'];
    // if we have a sid then we know the form was properly submitted, otherwise, we'll just return the existing $form array
    if ($sid) {
        // first we have to load up the webform node object
        $node = node_load($form_state['values']['details']['nid']);
        // create an array up with the confirmation message, retreived from the webform node
        $confirmation = array(
            '#type' => 'markup',
            '#markup' => check_markup($node->webform['confirmation'], $node->webform['confirmation_format'], '', TRUE),
        );
        // return the confirmation message
        return $confirmation;
    }
    else {
        // return the form
        return $form;
    }
}

/**
 * Implements hook_node_view().
 */
function afc_custom_node_view($node, $view_mode, $langcode) {
if (isset($_GET['ss'])) {
  dpm($node);
}
    switch ($node->type) {
        case 'page':

            //SHOUTOUT BOARD
            if ($node->nid ==70 ){

                //SHOUTOUT BUTTONS BLOCK
                $block = block_load('block', 3);
                $render_array = _block_get_renderable_array(_block_render_blocks(array($block)));
                $output = drupal_render($render_array);

                $node->content['circle_buttons'] = array(
                    '#markup' => $output,
                    '#weight' => 1,
                );
//                $node->content['test'] = array(
//                    '#markup' => '<a class="btn" href="#" onclick="myModule_ajax_load()">Ajax Test</a>',
//                    '#weight' => 1,
//                );
                //setup an empty ajax element to receive a call back from jquery
                $node->content['acallback'] = array(
                    '#markup' => '<div id="ajax-target" class="hide-field">Ajax goes here!!!</div>',
                    '#weight' => 1,
                );



                //JOB POSTINGS

//                $node->content['job_postings'] = array(
//                    '#markup' => $job_postings,
//                    '#weight' => 2,
//                );


            }


        break;
    }
}

function afc_custom_css_alter(&$css) {
    // Remove defaults.css file.
    $kk = false;
    $uri = $_SERVER['REQUEST_URI'];
    switch($uri) {

        case stristr($uri,'/content/page/shoutout-box'):
            $kk = true;
        break;
        case stristr($uri,'/modal_forms/ajax/webform/83'):
            $kk = true;
        break;
        case stristr($uri,'/modal_forms/ajax/webform/84'):
            $kk = true;
        break;
        case stristr($uri,'/modal_forms/ajax/webform/106'):
            $kk = true;
        break;
        default:
            $kk = false;
        break;
    }

    if ($kk == true) {
        //watchdog('afc_custom', 'Removed CSS from @uri', array('@uri' => $_SERVER['REQUEST_URI']));
        foreach ($css as $key => $style) {
            if (strpos($key, 'sites/all/themes/ashland_theme') !== false){
                unset($css[$key]);
            }
        }
    }



}
/**
 * Implementation of hook_preprocess_HOOK().
 */
function afc_custom_preprocess_html(&$variables){

    //only load css on our shoutout page
    if (isset($variables['page']['content']['system_main']['nodes'][70])) {

        drupal_add_css(drupal_get_path('module', 'afc_custom') . "/css/org_bootpress/form-elements.css");
        drupal_add_css(drupal_get_path('module', 'afc_custom') . "/css/org_bootpress/style.css");
        drupal_add_css(drupal_get_path('module', 'afc_custom') . "/css/org_bootpress/theme-style.css");
        drupal_add_css(drupal_get_path('module', 'afc_custom') . "/css/org_bootpress/animations.css");
        drupal_add_css(drupal_get_path('module', 'afc_custom') . "/css/org_bootpress/comments.css");
        drupal_add_css(drupal_get_path('module', 'afc_custom') . "/css/org_bootpress/local.css");
        drupal_add_css(drupal_get_path('module', 'afc_custom') . "/css/org_bootpress/responsive.css");
        drupal_add_css(drupal_get_path('module', 'afc_custom') . "/css/shoutout.css");
    }
}

/**
 * Implementation of hook_preprocess_HOOK().
 */
function afc_custom_preprocess_user_profile(&$variables){

    if (isset($variables['elements']['#account']->uid)) {
        $shouts = _get_shoutout_count($variables['elements']['#account']->uid);

        if ($shouts) {
            $variables['current_shoutouts'] = $shouts['current'];
            $variables['total_shoutouts'] = $shouts['total'];
        } else {
            $variables['current_shoutouts'] = 0;
            $variables['total_shoutouts'] = 0;
        }
    }

}

/**
 * Implementation of hook_preprocess_HOOK().
 */
function afc_custom_preprocess_node(&$variables){

    //shoutout node - Pass variables to node-70 tpl file
    if ($variables['nid'] == 70) {

        //check if ip is from ashland food coop . If it's not, apply a class that displays a message.
        //this class is applied in node--70.tpl.php and css in shoutout.css
        if (!ip_is_afc($_SERVER['REMOTE_ADDR'])) {
            //SHOUTOUT BUTTONS BLOCK
            $block = block_load('block', 4);
            $render_array = _block_get_renderable_array(_block_render_blocks(array($block)));
            $output = drupal_render($render_array);
            $variables['afc_or_not']='not-afc';
            $variables['sorry_display']=$output;
        } else {
            $variables['afc_or_not']='yes-afc';
        }

        $dept_list = views_embed_view('shoutout_department_emp_list', 'block');
        $huddle_new = views_embed_view('shoutout_huddle_news', 'block');
        $shout_list = views_embed_view('shoutout_comment_list', 'block');

        $job_postings = views_embed_view('shoutout_job_postings','block');

        $shout_menu = menu_load_links('menu-shoutout-menu');

        $shout_menu_html = '<div class="dropdown-content">';
        foreach($shout_menu as $shout_item => $item) {
            $link_path = $item['link_path'];
            $link_title = $item['link_title'];
            $link_alias = drupal_get_path_alias($link_path);
            if (substr( $link_alias, 0, 4 ) === "http") {
                $shout_menu_html .= '<a href="'.$link_alias.'">'.$link_title.'</a>';
            } else {
                $shout_menu_html .= '<a href="/'.$link_alias.'">'.$link_title.'</a>';
            }


        }
        $shout_menu_html .='</div>';

        //provided by afc_surveys module
        $survey_link = '';
        $survey_id = _getNextOpenSurvey();
        //if the array of survey ids contains more than zero ;)
        if (count($survey_id) > 0) {
          $survey_link = ctools_modal_text_button('New Employee Survey!', '/load-survey/nojs','Employee survey link', 'ctools-modal-modal-popup-large ctools-use-modal survey-popup-form');
        }

        $variables['dept_list'] = $dept_list;
        $variables['huddle_news']=$huddle_new;
        $variables['shout_list']=$shout_list;
        $variables['job_postings']=$job_postings;

        $variables['shout_menu'] = $shout_menu_html;
        $variables['survey_link'] = $survey_link;

    }

}

function afc_custom_mail ($key, &$message, $params) {
    switch ($key) {
        case 'shoutout_alert':
            // Set headers etc
//            'manager_email' => $manager->mail,
//            'manager_nick_name' => $mgr_profile->field_nick_name[LANGUAGE_NONE][0]['value'],
//            'employee_name' => $users_name,

            $message['to'] = $params['manager_email']; //$params['manager_email'];
            $message['subject'] = t('!Shoutout alert for @user_name', array('@user_name' => $params['employee_name']));
            $message['body'][] = t('Attn: @manager_name', array('@manager_name' => $params['manager_nick_name']));
            $message['body'][] = t('An employee in your department has reached 3 shoutouts.');
            $message['body'][] = t('Please acknowledge and reward @users_name as soon as possible.', array('@users_name' => $params['employee_name']));
            $message['body'][] = t("Click on the link below AFTER you have taken care of this.");
            $message['body'][] = t('Thank you!');
            $message['body'][] = t('Click here to mark as complete: @link',array('@link' => $params['update_link']));

            watchdog('afc_custom', 'Function: hook_mail - finished submitting mail to email address: @em', array('@em' => $params['manager_email']));

            break;
        case 'shoutout_alert_no_manager':
            $message['to'] = $params['to']; //$params['manager_email'];
            $message['subject'] = t('!Shoutout alert for @user_name', array('@user_name' => $params['employee_name']));
            $message['body'][] = t('Attn: @manager_name', array('@manager_name' => 'HRTeam'));
            $message['body'][] = t('An employee has received 3 shoutouts and needs a reward, however no manager was found for them.');
            $message['body'][] = t('Please address this and review why there is no manager assigned to this employees department.');

            watchdog('afc_custom', 'Function: hook_mail - email sent to hrteam because no manager was found');
            break;
        case 'remove_shoutout_error':
            $message['to'] = $params['to']; //$params['manager_email'];
            $message['subject'] = t('Shoutout Error! Couldnt remove shoutout user:@uid', array('@uid' => $params['uid']));
            $message['body'][] = t('Error on afcportal.com');
            $message['body'][] = 'When an admin unpublishes, or changes a shoutout that causes it to remove a shoutout point,
            the function afc_custom_remove_shoutout runs. Something happened in this case and this function did not
            run correctly.';
            $message['body'][] = 'If total shoutouts is a multiple of 3, then the current shoutouts must be zero. If its not, fix it to be.';
            $message['body'][] = 'Check the watchdog dblog in drupal for more information, and look at this function in afc_custom.module';
            watchdog('afc_custom', 'Function: hook_mail - remove_shoutout_error email sent to tech');
            break;
        case 'create_reward_error':
            $message['to'] = $params['to']; //$params['manager_email'];
            $message['subject'] = t('Shoutout Error! Couldnt create reward for user:@uid', array('@uid' => $params['uid']));
            $message['body'][] = t('Error on afcportal.com');
            $message['body'][] = 'When a user receives a shoutout, this module creates a new node for it and increases
            the total_shoutout count by 1, and increases the current_shoutout count by 1. If a user gets 3 current shoutouts,
            this module creates a new reward item on their profile and sends an email to that persons manager.';
            $message['body'][] = 'This function returned false, and thus it did NOT create a reward, and possibly did not
            alert the persons manager. Investigate why this has happened, and if the person definitely needed a reward, let HR know.
             You can manually add a reward on their account too while debugging.';
            $message['body'][] = 'Check the watchdog dblog in drupal for more information, and look at this function in afc_custom.module';
            watchdog('afc_custom', 'Function: hook_mail - create_reward_error email sent to tech');
            break;
        case 'calculate_shoutout_error':
            $message['to'] = $params['to']; //$params['manager_email'];
            $message['subject'] = t('Shoutout Error! Couldnt calculate shoutout for user:@uid', array('@uid' => $params['uid']));
            $message['body'][] = t('Error on afcportal.com');
            $message['body'][] = 'Something happened with the afc_custom_calculate_shoutout function. This function runs anytime
            a new shoutout is created. There should be more info in the dblog about it.';
            $message['body'][] = 'Check the watchdog dblog in drupal for more information, and look at this function in afc_custom.module';
            watchdog('afc_custom', 'Function: hook_mail - calculate_shoutout_error email sent to tech');
            break;
        case 'general_shoutout_error':
            $message['to'] = $params['to']; //$params['manager_email'];
            $message['subject'] = t('Shoutout General Error!');
            $message['body'][] = t('Error on afcportal.com');
            $message['body'][] = t('Login and check the dblog for more details');
            $message['body'][] = $params['body'];
            watchdog('afc_custom', 'Function: hook_mail - general_shoutout_error email sent to tech');
            break;
    }
}

function afc_custom_menu_alter(&$items) {
    // Change the title of user profile pages to the user's name.  Gak.

    $items['user/%user']['title callback'] = 'afc_custom_user_page_title';

}

function afc_custom_node_update($node){

/* Handle the few cases of what should happen when a shoutout node is updated
 * If shoutout is unpublished
 * If the shoutout was a cxi, then count down the points
 * If the shoutout was just normal, simply unpublish it
 * If the shoutout is switched from general to cxi or vise versa, handle the count
*/

    if ($node->type == 'shoutout') {

    //----IF SWITCHING FROM A GENERAL SHOUTOUT TO CXI SHOUTOUT
        if ($node->original->field_general_shoutout_[LANGUAGE_NONE][0]['value'] == 1
                && $node->field_general_shoutout_[LANGUAGE_NONE][0]['value'] == 0){

            //if its unpublished do nothing
            if ($node->status == 0) {
                watchdog('afc_custom','node_update: The user switched a shoutout from general to cxi, but its unpublished, so I did nothing');
                drupal_set_message('You switched a shoutout from General to CXi, however this shoutout is unpublished, so I didn\'t do anything.');
            } else {
            //if it is published calculate it
            //switched from a general shoutout to a cxi shoutout
                if(isset($node->field_employee[LANGUAGE_NONE][0]['uid'])) {
                    $userid = $node->field_employee[LANGUAGE_NONE][0]['uid'];
                    watchdog('afc_custom', 'Function: afc_custom_node_update - switching shoutout from general to CXi, add a new point');
                    afc_custom_calculate_shoutout($userid);
                }
            }


    //----IF SWITCHING FROM A CXI SHOUTOUT TO A GENERAL SHOUTOUT
        } elseif ($node->original->field_general_shoutout_[LANGUAGE_NONE][0]['value'] == 0
            && $node->field_general_shoutout_[LANGUAGE_NONE][0]['value'] == 1){

            //if its unpublished do nothing
            if ($node->status == 0) {
                watchdog('afc_custom','node_update: The user switched a shoutout from general to cxi, but its unpublished, so I did nothing');
                drupal_set_message('You switched a shoutout from CXi to General, however this shoutout is unpublished, so I didn\'t do anything.');
            } else {
                //switched from a CXI shoutout to a general shoutout'
                if(isset($node->field_employee[LANGUAGE_NONE][0]['uid'])) {
                    //unpublishing node
                    $userid = $node->field_employee[LANGUAGE_NONE][0]['uid'];
                    if (!afc_custom_remove_shoutout($userid)) {
                        watchdog('afc_custom', 'Function: afc_custom_node_update - remove_shoutout came back false. Did not countdown shoutout counts');
                    } else {
                        watchdog('afc_custom', 'Function: afc_custom_node_update - switching shoutout from CXi to General. remove_shoutout came back true');
                    }
                }
            }
        } else {
            //the field was blank first and is now being updated to say NO
            //do nothing, going from BLANK to NO should have no change
        }

    //----IF UNPUBLISHING
        if (isset($node->original->status) && $node->original->status == 1 && $node->status == 0){
            if ($node->field_general_shoutout_[LANGUAGE_NONE][0]['value'] != 1) {
                //if it equals zero then its cxi and has rewards
                if(isset($node->field_employee[LANGUAGE_NONE][0]['uid'])) {
                    //unpublishing node
                    $userid = $node->field_employee[LANGUAGE_NONE][0]['uid'];
                    watchdog('afc_custom', 'Function: afc_custom_node_update - Unpublishing shoutout');
                    afc_custom_remove_shoutout($userid);
                }
            } else {
                watchdog('afc_custom', 'Function: afc_custom_node_update - Unpublishing a general shoutout do nothing');
            }
        }

    //----IF PUBLISHING something that WAS unpublished first
        //if user only publishes, then do nothing. If they publish AND switch to cxi, recalculate shoutouts
        //if they publish AND switch to general, do nothing, since counts will already be correct. This is already
        //accomplished above in the switch statement. Simply remove the message if users makes cxi AND publishes
        if (isset($node->original->status) && $node->original->status == 0 && $node->status == 1){
            //switching from general to cxi
            if ($node->original->field_general_shoutout_[LANGUAGE_NONE][0]['value'] == 1
                && $node->field_general_shoutout_[LANGUAGE_NONE][0]['value'] == 0) {
                //do nothing, this is already accomplished in another case above

            //if re-publishing a cxi shoutout
            } elseif ($node->original->field_general_shoutout_[LANGUAGE_NONE][0]['value'] == 0
                && $node->field_general_shoutout_[LANGUAGE_NONE][0]['value'] == 0){
                if(isset($node->field_employee[LANGUAGE_NONE][0]['uid'])) {
                    $userid = $node->field_employee[LANGUAGE_NONE][0]['uid'];
                    watchdog('afc_custom', 'Function: afc_custom_node_update - switching shoutout from general to CXi, add a new point');
                    afc_custom_calculate_shoutout($userid);
                }
            } else {
                //unhandled case, could be anything, maybe alert admin
            }


        }

    }
}

function afc_custom_user_page_title() {

    if (arg(0) == 'user') {
        // Load uid from url
        $user = user_load(arg(1));
        // Get the full user name somehow;
        $output = user_full_name(arg(1));
    }
    // Fallback to username if no fields are present
    if (empty($output)) {
        $output = $user->name;
    }
    return $output;
}
