<?php
/**
 * @file
 * Module file for custom behaviours and functions used by AFC
 * Basic hook implementations and helper functions will be found here.
 *
 *
 */


/**
 * Custom function to get user profile fields
 */
function get_profile($uid) {
    $user = user_load($uid);
    if ($user) {
        $profile = profile2_load_by_user($user);
        if (isset($profile['main'])) {
            $profile = $profile['main'];
            return $profile;
        } else {
            return FALSE;
        }

    } else {
        return FALSE;
    }
}

/**
 * Custom function to count shoutouts
 *  and change number when new shoutout is given
 */
function afc_custom_calculate_shoutout($uid) {
    $profile = get_profile($uid);

    if ($profile) {
        if (isset($profile->field_total_shoutouts) && isset($profile->field_current_shoutouts)) {
            $total_so = $profile->field_total_shoutouts[LANGUAGE_NONE][0]['value'];
            $current_so = $profile->field_current_shoutouts[LANGUAGE_NONE][0]['value'];

            if ($current_so == 3) {
                //call shoutout alert function
            } else {
                $profile->field_current_shoutouts[LANGUAGE_NONE][0]['value'] = $current_so + 1;
                $profile->field_total_shoutouts[LANGUAGE_NONE][0]['value'] =  $total_so + 1;
            }
        }
    }
}


/**
 * Custom function that creates shoutout node from
 *  submitted response on shoutout webform
 */
function afc_custom_add_new_shoutout(&$nodeinfo){
    global $user; //should be service account

    $title = 'shoutout to ' . $nodeinfo['employee_to'] . date('m-d-y');
    $new_message = null;
    $new_message = new stdClass();
    $new_message->title = $title;
    $new_message->body[LANGUAGE_NONE][0]['value'] = $nodeinfo['body'];
    $new_message->type = 'shoutout';
    $new_message->language = LANGUAGE_NONE;
    node_object_prepare($new_message);
    $new_message->uid = $user->uid;
    $new_message->status = 1;
    $new_message->promote = 0;
    $new_message->comment = 0;
    $new_message->field_employee[LANGUAGE_NONE][0]['uid'] = $nodeinfo['employee_to'];
    $new_message->field_employee_from[LANGUAGE_NONE][0]['uid'] = $nodeinfo['employee_from'];

    $new_message = node_submit($new_message);
    node_save($new_message);

    watchdog('afc_custom', 'Created new shoutout to user @user', array('@user' => $nodeinfo['employee_to']));
}

/**
 * Custom function to lookup uid for badge number
 */
function afc_custom_return_uid_for_badge($badge) {
    if ($badge) {
        $query = db_query("SELECT p.uid FROM {field_data_field_badge} b join {profile} p on entity_id = pid where b.field_badge_value =".$badge);
        $records = $query->fetchAll();
        if ($records[0]->uid) {
            //if its there, return the first one
            return $records[0]->uid;
        }
    }
}

/**
 * hook_form_alter
 */
function afc_custom_form_alter(&$form, &$form_state, $form_id) {

    //If on shoutout form
    if ($form_id == 'webform_client_form_84') {

        ctools_include('modal');
        ctools_include('ajax');
        ctools_add_js('ajax-responder');

        //if its been submitted call the function that creates a shoutout and close the form
        if (!empty($form_state['executed'])) {

            $emp_from = $form_state['input']['submitted']['employee_id_from'];
            $emp_to = $form['submitted']['employee_id_to']['#default_value'];
            $can_msg = $form_state['input']['submitted']['shoutout_canned_responses'];
            $other_msg = $form_state['input']['submitted']['shoutout_message'];

            $nodeinfo = array();
            $nodeinfo['employee_to'] = $emp_to;
            $nodeinfo['employee_from'] =$emp_from;
            $nodeinfo['body'] = (trim(strlen($other_msg)) == 0) ? $can_msg : $other_msg;
            afc_custom_add_new_shoutout($nodeinfo);
            afc_custom_calculate_shoutout($emp_to);
            $output[] = ctools_modal_command_dismiss(); //Close modal automatically
            $output[] = ajax_command_replace('#ajax-response', '<div id="ajax-msg">Thanks for showing appreciation of your fellow employees! You\'re awesome!</div>');
            print ajax_render($output);
            drupal_exit();
        }

        //get the user the shoutout is to
        if (isset($_GET['sho'])) {

            $user = user_load(check_plain($_GET['sho']));
            if ($user) {
                $form['submitted']['employee_id_to']['#default_value'] = $user->uid;
                $profile = profile2_load_by_user($user);
                $profile = $profile['main'];
                $nick_name = $profile->field_nick_name['und'][0]['value'] . ' ' . $profile->field_last_name['und'][0]['value'];

                $form['submitted']['my_form_component']['#title'] = $nick_name;
//                $form['foo'] = array(
//                    '#markup' => '<div class="nickname">To: '.$nick_name.'</div>',
//                    '#weight' => -10,
//                );
            }

        }

        //Add validate and submit
        $form['#validate'][] = 'afc_custom_validate_webform_84';
//        $form['#submit'][] = 'afc_custom_submit_webform_84';
//        $first = array_shift($form['#submit']);
//        array_unshift($form['#submit'], $first, 'afc_custom_submit_webform_84');
    }

}

/**
 * Validation handler for Webform ID #84.
 */
function afc_custom_validate_webform_84(&$form, &$form_state) {

    if(isset($form_state['values']['submitted']['employee_id_from'])) {
        $badge = $form_state['values']['submitted']['employee_id_from'];
        $uid = afc_custom_return_uid_for_badge($badge);
        if (!$uid) {
            //error if we can't find a matching uid for that badge
            form_set_error('', t('It looks like your badge# is incorrect :('));
//            $form_state['rebuild'] = TRUE;
        } else {
            $form_state['values']['submitted']['employee_id_from'] = $uid;
        }
    }
}


function afc_custom_webform_js_submit($form, $form_state) {
    watchdog('afc_custom', 'calling js submit');
    // define the $sid variable (submission id from webform)
    $sid = $form_state['values']['details']['sid'];
    // if we have a sid then we know the form was properly submitted, otherwise, we'll just return the existing $form array
    if ($sid) {
        // first we have to load up the webform node object
        $node = node_load($form_state['values']['details']['nid']);
        // create an array up with the confirmation message, retreived from the webform node
        $confirmation = array(
            '#type' => 'markup',
            '#markup' => check_markup($node->webform['confirmation'], $node->webform['confirmation_format'], '', TRUE),
        );
        // return the confirmation message
        return $confirmation;
    }
    else {
        // return the form
        return $form;
    }
}

/**
 * Implements hook_node_view().
 */
function afc_custom_node_view($node, $view_mode, $langcode) {
if (isset($_GET['ss'])) {

}
    switch ($node->type) {
        case 'page':

            //SHOUTOUT BOX
            if ($node->nid ==70 ){
//                dpm($node);

                $bike_to_work = '<button id="bike-to-work-btn" class="shout-buttons btn-one">Bike to Work</button>';
                $emp_sugg ='<button id="employee-sugg-btn" class="shout-buttons btn-two">Employee Suggestion</button>';
                $job_openings = '<button id="job-openings-btn" class="shout-buttons btn-three">Job Openings</button>';

                //bike to work
                $node->content['bike_to_work'] = array(
                    '#markup' => $bike_to_work,
                    '#weight' => 1,
                );

                //employee suggesstion button
                $node->content['emp_sugg'] = array(
                    '#markup' => $emp_sugg,
                    '#weight' => 1,
                );

                //job openings button
                $node->content['job_openings'] = array(
                    '#markup' => $job_openings,
                    '#weight' => 1,
                );
            }


        break;
    }
}

/**
 * Implementation of hook_preprocess_HOOK().
 */
function afc_custom_preprocess_node(&$variables){

    if ($variables['nid'] == 70) {

        $dept_list = views_embed_view('shoutout_department_emp_list', 'block');
        $huddle_new = views_embed_view('shoutout_huddle_news', 'block');
        $shout_list = views_embed_view('shoutout_comment_list', 'block');

        $variables['dept_list'] = $dept_list;
        $variables['huddle_news']=$huddle_new;
        $variables['shout_list']=$shout_list;

    }
}

