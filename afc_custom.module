<?php
/**
 * @file
 * Module file for custom behaviours and functions used by AFC
 * Basic hook implementations and helper functions will be found here.
 *
 *
 */

/**
 * Custom function get the uid of the user inside
 * the department who is labeled 'manager'
 */
function _get_manager_of_dept($dept_tid, $manager_tid) {
    //SELECT et.entity_id, et.field_employee_type_tid FROM field_data_field_department fd join
    // field_data_field_employee_type et on fd.entity_id = et.entity_id WHERE fd.field_department_tid = 7 and et.field_employee_type_tid = 36;

    $query = db_query("SELECT et.entity_id, et.field_employee_type_tid FROM {field_data_field_department} fd join {field_data_field_employee_type} et on
                      fd.entity_id = et.entity_id where fd.field_department_tid =".$dept_tid." and et.field_employee_type_tid =".$manager_tid);
    $records = $query->fetchAll();

    if ($records[0]->entity_id) {
        //if its there, return the profile ID of employee
        $pid = $records[0]->entity_id;

        //now get uid from profile ID pid
        $query2 = db_query("SELECT p.uid FROM {profile} p where p.pid=".$pid);
        $uid = $query2->fetchAll();
        if ($uid[0]->uid) {
            return $uid[0]->uid;
        } else {
            //a manager profile was found but a matching user id was not found for some reason
            return false;
        }

    } else {
        //no manager was found for that department
        return false;
    }
}

/**
 * Custom function get the tid for the term 'manager'
 */
function _get_manager_tid() {

    //maybe load the vocab by name instead of queriing anything?
    $query = db_query("SELECT t.tid FROM {taxonomy_term_data} t where t.name ='manager'");
    $records = $query->fetchAll();

    if ($records[0]->tid) {
        //if its there, return the first one
        return $records[0]->tid;
    } else {
        return false;
    }
}


/**
 * Custom function to alert manager of shoutout prize
 * uid is the user who has received the 3rd shoutout
 */
function shoutout_alert($uid) {
//    get the user_
//    get the department
//    get the manager of that department

    $user_profile = get_profile($uid);
    $manager_tid = _get_manager_tid();

    if ($user_profile && $manager_tid) {
        if (isset($user_profile->field_department[LANGUAGE_NONE])) {
            $dept_tid = $user_profile->field_department[LANGUAGE_NONE][0]['tid'];
            $manager_uid = _get_manager_of_dept($dept_tid,$manager_tid);
            if ($manager_uid) {
                $manager = user_load($manager_uid);
                $mgr_profile = get_profile($manager_uid);

                $to = $manager->mail;
                $site_email = variable_get('site_mail', '');
                $users_name = $user_profile->field_nick_name[LANGUAGE_NONE][0]['value'].' '.$user_profile->field_last_name[LANGUAGE_NONE][0]['value'];


                $values = array(
                    'manager_email' => $manager->mail,
                    'manager_nick_name' => $mgr_profile->field_nick_name[LANGUAGE_NONE][0]['value'],
                    'employee_name' => $users_name,
                );
//                drupal_mail('ec_app', 'notify_ec_user', $user->mail, 'en', $values, $user->name . ' <' . $user->mail . '>');
//                drupal_mail('afc_custom', 'shoutout_alert', $to, 'en', $values, $from = NULL, $send = TRUE);
                watchdog('afc_custom','Function: shoutout_alert - built email and submitted it for @tuser', array('@tuser' => $users_name));
                drupal_mail('afc_custom', 'shoutout_alert', $to, 'en', $values, $site_email);

            }
        } else {
            return false;
        }
    } else {
        return false;
    }
}

/**
 * Custom function to get user profile fields
 */
function get_profile($uid) {
    $user = user_load($uid);
    if ($user) {
        $profile = profile2_load_by_user($user);
        if (isset($profile['main'])) {
            $profile = $profile['main'];
            return $profile;
        } else {
            return FALSE;
        }

    } else {
        return FALSE;
    }
}

/**
 * Custom function to count shoutouts
 *  and change number when new shoutout is given
 */
function afc_custom_calculate_shoutout($uid) {

    if (empty($uid)) {
        return false;
    }

    $profile = get_profile($uid);

    if ($profile) {
        if (isset($profile->field_total_shoutouts) && isset($profile->field_current_shoutouts)) {

            $total_so = $profile->field_total_shoutouts[LANGUAGE_NONE][0]['value'];
            $current_so = $profile->field_current_shoutouts[LANGUAGE_NONE][0]['value'];

            //add new shoutout to shoutouts and save
            $profile->field_current_shoutouts[LANGUAGE_NONE][0]['value'] = $current_so + 1;
            $profile->field_total_shoutouts[LANGUAGE_NONE][0]['value'] =  $total_so + 1;
            profile2_save($profile);

            if ($profile->field_current_shoutouts[LANGUAGE_NONE][0]['value'] == 3) {
                //alert manager of shoutout prize
                shoutout_alert($uid);
                //reset current shoutouts to 0
                //also send over the shoutouts so the manager sees the last one in the email?
                //also create a reward node and send a link to the manager to aknowledge it
            }
        } else {
            watchdog('afc_custom','Function: afc_custom_calculate_shoutout - one or both of the profile fields are not set on user profile. field_total_shoutouts field_current_shoutouts');
            return false;
        }
    } else {
        watchdog('afc_custom','Function: afc_custom_calculate_shoutout - no profile was found');
        return false;
    }
    return true;
}


/**
 * Custom function that creates shoutout node from
 *  submitted response on shoutout webform
 */
function afc_custom_add_new_shoutout(&$nodeinfo){
    if (empty($nodeinfo)) {
        return false;
    }

    global $user; //should be service account

    $emp_from = afc_custom_return_uid_for_badge($nodeinfo['employee_from']);

    $title = 'shoutout to ' . $nodeinfo['employee_to'] . date('m-d-y');
    $new_message = null;
    $new_message = new stdClass();
    $new_message->title = $title;
    $new_message->body[LANGUAGE_NONE][0]['value'] = $nodeinfo['body'];
    $new_message->type = 'shoutout';
    $new_message->language = LANGUAGE_NONE;
    node_object_prepare($new_message);
    $new_message->uid = $user->uid;
    $new_message->status = 1;
    $new_message->promote = 0;
    $new_message->comment = 0;
    $new_message->field_employee[LANGUAGE_NONE][0]['uid'] = $nodeinfo['employee_to'];
    $new_message->field_employee_from[LANGUAGE_NONE][0]['uid'] = $emp_from;

    $new_message = node_submit($new_message);
    node_save($new_message);

    watchdog('afc_custom', 'Created new shoutout to user @user', array('@user' => $nodeinfo['employee_to']));
    return true;
}

/**
 * Custom function to lookup uid for badge number
 */
function afc_custom_return_uid_for_badge($badge) {
    if ($badge) {
        $query = db_query("SELECT p.uid FROM {field_data_field_badge} b join {profile} p on entity_id = pid where b.field_badge_value =".$badge);
        $records = $query->fetchAll();
        if ($records[0]->uid) {
            //if its there, return the first one
            return $records[0]->uid;
        }
    } else {
        return false;
    }
}

/**
 * hook_form_alter
 */
function afc_custom_form_alter(&$form, &$form_state, $form_id) {

    //If on shoutout form
    if ($form_id == 'webform_client_form_84') {

        ctools_include('modal');
        ctools_include('ajax');
        ctools_add_js('ajax-responder');

                //SUBMITTED EMPLOYEE SHOUTOUT FORM
                //on submit calculate shoutouts and alert manager
                if (!empty($form_state['executed'])) {

                    $emp_from = $form_state['input']['submitted']['employee_id_from'];
                    $emp_to = $form['submitted']['employee_id_to']['#default_value'];

                    //get text from canned message drop down
                    if (!empty($form['submitted']['shoutout_canned_responses']['#default_value'])) {
                        $can_tid = $form['submitted']['shoutout_canned_responses']['#default_value'];
                        if (array_key_exists($can_tid, $form['submitted']['shoutout_canned_responses']['#options'])) {
                            $can_msg = $form['submitted']['shoutout_canned_responses']['#options'][$can_tid];
                        } else {
                            //tid cant be found in the drop down array
                            $can_msg = null;
                        }

                    } else {

                        $can_msg = null;
                    }

                        $other_msg = $form_state['input']['submitted']['shoutout_message'];
                        $nodeinfo = array();
                        $nodeinfo['employee_to'] = $emp_to;
                        $nodeinfo['employee_from'] = $emp_from;
                        $nodeinfo['body'] = (trim(strlen($other_msg)) == 0) ? $can_msg : $other_msg;

                        if (!afc_custom_add_new_shoutout($nodeinfo)) {
                            watchdog('afc_custom', 'Function: hook_form_alter - afc_custom_add_new_shoutout failed and returned false');
                        }

                        if (!afc_custom_calculate_shoutout($emp_to)) {
                            watchdog('afc_custom', 'Function: hook_form_alter - afc_custom_calculate_shoutout failed and returned false');
                            //send an email to an admin letting them know if this happens
                        }

                        $output[] = ctools_modal_command_dismiss(); //Close modal automatically
                        $output[] = ajax_command_replace('#ajax-response', '<div id="ajax-msg">Thanks for showing appreciation of your fellow employees! You\'re awesome!</div>');
                        print ajax_render($output);
                        drupal_exit();
                    }
                    //END EMPLOYEE SUBMITTED SHOUTOUT FORM

        //get the user the shoutout is to
        if (isset($_GET['sho'])) {

            $user = user_load(check_plain($_GET['sho']));
            if ($user) {
                $form['submitted']['employee_id_to']['#default_value'] = $user->uid;
                $profile = profile2_load_by_user($user);
                $profile = $profile['main'];
                $nick_name = $profile->field_nick_name['und'][0]['value'] . ' ' . $profile->field_last_name['und'][0]['value'];

                $form['submitted']['my_form_component']['#title'] = $nick_name;
//                $form['foo'] = array(
//                    '#markup' => '<div class="nickname">To: '.$nick_name.'</div>',
//                    '#weight' => -10,
//                );
            }

        }

        //Add validate and submit
        $form['#validate'][] = 'afc_custom_validate_webform_84';
//        $form['#submit'][] = 'afc_custom_submit_webform_84';
//        $first = array_shift($form['#submit']);
//        array_unshift($form['#submit'], $first, 'afc_custom_submit_webform_84');
    }

}

/**
 * Validation handler for Webform ID #84.
 */
function afc_custom_validate_webform_84(&$form, &$form_state) {

    if(isset($form_state['values']['submitted']['employee_id_from'])) {
        $badge = $form_state['values']['submitted']['employee_id_from'];
        $uid = afc_custom_return_uid_for_badge($badge);
        if (!$uid) {
            //error if we can't find a matching uid for that badge
            form_set_error('', t('It looks like your badge# is incorrect :('));
//            $form_state['rebuild'] = TRUE;
        } else {
            $form_state['values']['submitted']['employee_id_from'] = $uid;
        }
    }
}


function afc_custom_webform_js_submit($form, $form_state) {
    watchdog('afc_custom', 'calling js submit');
    // define the $sid variable (submission id from webform)
    $sid = $form_state['values']['details']['sid'];
    // if we have a sid then we know the form was properly submitted, otherwise, we'll just return the existing $form array
    if ($sid) {
        // first we have to load up the webform node object
        $node = node_load($form_state['values']['details']['nid']);
        // create an array up with the confirmation message, retreived from the webform node
        $confirmation = array(
            '#type' => 'markup',
            '#markup' => check_markup($node->webform['confirmation'], $node->webform['confirmation_format'], '', TRUE),
        );
        // return the confirmation message
        return $confirmation;
    }
    else {
        // return the form
        return $form;
    }
}

/**
 * Implements hook_node_view().
 */
function afc_custom_node_view($node, $view_mode, $langcode) {
if (isset($_GET['ss'])) {
    $uid = afc_custom_return_uid_for_badge(9806);
    dpm($uid);
}
    switch ($node->type) {
        case 'page':

            //SHOUTOUT BOX
            if ($node->nid ==70 ){
//                dpm($node);

                $bike_to_work = '<button id="bike-to-work-btn" class="shout-buttons btn-one">Bike to Work</button>';
                $emp_sugg ='<button id="employee-sugg-btn" class="shout-buttons btn-two">Employee Suggestion</button>';
                $job_openings = '<button id="job-openings-btn" class="shout-buttons btn-three">Job Openings</button>';

                //bike to work
                $node->content['bike_to_work'] = array(
                    '#markup' => $bike_to_work,
                    '#weight' => 1,
                );

                //employee suggesstion button
                $node->content['emp_sugg'] = array(
                    '#markup' => $emp_sugg,
                    '#weight' => 1,
                );

                //job openings button
                $node->content['job_openings'] = array(
                    '#markup' => $job_openings,
                    '#weight' => 1,
                );
            }


        break;
    }
}

/**
 * Implementation of hook_preprocess_HOOK().
 */
function afc_custom_preprocess_node(&$variables){

    if ($variables['nid'] == 70) {

        $dept_list = views_embed_view('shoutout_department_emp_list', 'block');
        $huddle_new = views_embed_view('shoutout_huddle_news', 'block');
        $shout_list = views_embed_view('shoutout_comment_list', 'block');

        $variables['dept_list'] = $dept_list;
        $variables['huddle_news']=$huddle_new;
        $variables['shout_list']=$shout_list;

    }
}

function afc_custom_mail ($key, &$message, $params) {
    switch ($key) {
        case 'shoutout_alert':
            // Set headers etc
//            'manager_email' => $manager->mail,
//            'manager_nick_name' => $mgr_profile->field_nick_name[LANGUAGE_NONE][0]['value'],
//            'employee_name' => $users_name,

            $message['to'] = 'mcampbell@ashlandfood.coop'; //$params['manager_email'];
            $message['subject'] = t('!Shoutout alert for @user_name', array('@user_name' => $params['employee_name']));
            $message['body'][] = t('Attn: @manager_name', array('@manager_name' => $params['manager_nick_name']));
            $message['body'][] = t('An employee in your department has reached 3 shoutouts.');
            $message['body'][] = t('Please acknowledge and reward @users_name as soon as possible.', array('@users_name' => $params['employee_name']));
            $message['body'][] = t("Click this link after you're done to show that you've taken care of this.");
            $message['body'][] = t('Thank you!');

            watchdog('afc_custom', 'Function: hook_mail - finished submitted mail');

            break;
    }
}